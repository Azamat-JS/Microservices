// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: proto/products.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "products";

export interface UpdataProductDto {
  productId: number;
  price: number;
}

export interface Empty {
}

export interface Products {
  users: ProductResponse[];
}

export interface ProductRequest {
  productId: number;
}

export interface ProductResponse {
  productId: number;
  name: string;
  price: number;
}

export interface CreateProductDto {
  name: string;
  price: number;
}

export const PRODUCTS_PACKAGE_NAME = "products";

export interface ProductServiceClient {
  getProduct(request: ProductRequest): Observable<ProductResponse>;

  craeteProduct(request: CreateProductDto): Observable<ProductResponse>;

  findAllProducts(request: Empty): Observable<Products>;

  updateProduct(request: UpdataProductDto): Observable<ProductResponse>;

  deleteProduct(request: ProductRequest): Observable<ProductResponse>;
}

export interface ProductServiceController {
  getProduct(request: ProductRequest): Promise<ProductResponse> | Observable<ProductResponse> | ProductResponse;

  craeteProduct(request: CreateProductDto): Promise<ProductResponse> | Observable<ProductResponse> | ProductResponse;

  findAllProducts(request: Empty): Promise<Products> | Observable<Products> | Products;

  updateProduct(request: UpdataProductDto): Promise<ProductResponse> | Observable<ProductResponse> | ProductResponse;

  deleteProduct(request: ProductRequest): Promise<ProductResponse> | Observable<ProductResponse> | ProductResponse;
}

export function ProductServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getProduct", "craeteProduct", "findAllProducts", "updateProduct", "deleteProduct"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ProductService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ProductService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const PRODUCT_SERVICE_NAME = "ProductService";
